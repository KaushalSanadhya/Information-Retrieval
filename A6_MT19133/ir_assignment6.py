# -*- coding: utf-8 -*-
"""IR_Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MOI6OtvJaJVPae87meHdqEar_BiuA-gf
"""

#Cell 0 ##
##importing all essentials##
import numpy as np
import glob
from sklearn.utils import shuffle
import os
import math
import operator
import matplotlib.pyplot as plt 
import random 
import matplotlib.pyplot as plt 
import networkx as nx 
import pandas as pd  
import statistics

#Cell 1##
## Creating adjecency matrix##

email_eu = open("email-Eu-core.txt","r") 
email_eu=(email_eu.read()).split()

f2 = open("email-Eu-core-department-labels.txt","r") 
f2=(f2.read()).split()
for i in range(0,len(f2),2):
  last=f2[i]

last=int(last)

LOL=[[]for i in range(0,last+1)]

for i in range(0,len(email_eu),2):
  
  LOL[int(email_eu[i])].append(int(email_eu[i+1]))

updt=[]

for item in LOL:
  
  temp=sorted(item)
  
  updt.append(temp)

print(LOL)
print(updt)

adj=[]
for i in range(0,last+1):
  temp=[0 for j in range(0,last+1)]
  adj.append(temp)

for i in range(0,last+1):
  LIST=updt[i]
  for item in LIST:
    adj[i][item]=1

adj=np.array(adj)
adj=adj.transpose()

print(adj)

## Cell 2 ##
#1. Number of Nodes
print("Number of Nodes",len(adj))

#2. Number of Edges
edges=0
temp=adj.transpose()
for item in temp:
  for entry in item:
    if entry==1:
      edges=edges+1
print("Number of Edges",edges)

#3. Avg In-degree
avg=0
for item in adj:
  for entry in item:
    if entry==1:
      avg=avg+1

print("Avg In-degree",avg/len(adj))


#4. Avg. Out-Degree
avg=0
for item in adj.transpose():
  for entry in item:
    if entry==1:
      avg=avg+1

print("Avg Out-degree",avg/len(adj))


#5. Node with Max In-degree
max=0
max_node=0
i=0
for item in adj:
  sum=0
  for entry in item:
    if entry==1:
      sum=sum+1
  if sum> max:
    max=sum
    max_node=i
  i=i+1

print("Node with Max In-degree is",max_node )




#6. Node with Max out-degree
max=0
max_node=0
i=0
for item in adj.transpose():
  sum=0
  for entry in item:
    if entry==1:
      sum=sum+1
  if sum> max:
    max=sum
    max_node=i
  i=i+1

print("Node with Max Out-degree is",max_node )


#7. Density of the network
max_edges=len(adj)*len(adj)
sum=0
  
for item in adj:
  for entry in item:
    if entry==1:
      sum=sum+1
print("Density of the network",sum/max_edges)

## Cell 3##
## Edge List ##

from collections import defaultdict 
matrix=adj.transpose()
adjList = defaultdict(list)
for i in range(len(matrix)):
  for j in range(len(matrix[i])):
    if matrix[i][j]== 1:
      adjList[i].append(j) 

print((adjList))

## Cell 4 ##
# 1. Plot degree distribution of the network

LIST=[]

for item in adj:
  sum=0
  for entry in item:
    if entry==1:
      sum=sum+1
  LIST.append(sum)

Range = (0, 180) 
bins = 10
plt.hist(LIST, bins, Range, color = 'blue', 
		histtype = 'bar', rwidth = 0.8) 
plt.xlabel('degree of nodes') 
plt.ylabel('number of nodes') 
plt.title('histogram of In-degree distribution ') 
plt.show() 



nodes=[]
for i in range(0,1005):
  nodes.append(i)

plt.scatter(nodes,LIST)
plt.xlabel('nodes') 
plt.ylabel('in degree of nodes') 
plt.title('Scatter plot of In-degree distribution') 
plt.show()


import collections
counter=collections.Counter(LIST)

LIST=sorted(LIST)
y=[]
for i in counter.values():
  y.append(i/1005)
plt.scatter(counter.keys(),y , color= "blue", 
			marker= "*", s=10) 
plt.xlabel('In-Degree of nodes') 
plt.ylabel('fraction of nodes') 
plt.title('In-Degree vs fraction of nodes') 
plt.show()

## Cell 5 ##
# 1. Plot out-degree distribution of the network

LIST=[]

for item in adj.transpose():
  sum=0
  for entry in item:
    if entry==1:
      sum=sum+1
  LIST.append(sum)

Range = (0, 180) 
bins = 10
plt.hist(LIST, bins, Range, color = 'green', 
		histtype = 'bar', rwidth = 0.8) 
plt.xlabel('degree of nodes') 
plt.ylabel('number of nodes') 
plt.title('histogram of Out-degree distribution ') 
plt.show() 


nodes=[]
for i in range(0,1005):
  nodes.append(i)

plt.scatter(nodes,LIST,color="green")
plt.xlabel('nodes') 
plt.ylabel('out degree of nodes') 
plt.title('Scatter plot of Out-degree distribution') 
plt.show()


import collections
counter=collections.Counter(LIST)

LIST=sorted(LIST)
y=[]
for i in counter.values():
  y.append(i/1005)
plt.scatter(counter.keys(),y , color= "green", 
			marker= "*", s=10) 
plt.xlabel('Out-Degree of nodes') 
plt.ylabel('fraction of nodes') 
plt.title('Out-Degree vs fraction of nodes') 
plt.show() 


print(counter)

## Cell 6 ##
## 2. Calculate the clustering coefficient of each node ##
total=0
Result=[]
for item in adj.transpose():
  Kv=0
  Nv=0
  POS=[]
  for pos in item:
    
    if pos ==1:
      Kv=Kv+1
      POS.append(pos)
  
  for value in POS:
    TEMP=(adj.transpose())[value]
    for i in TEMP:
      if i in POS:
        Nv=Nv+1
  if Nv!=0 and Kv !=0 and Kv!=1:
    Result.append(Nv/(Kv*(Kv-1)))
  else:
    Result.append(0)


Sum=0
for item in Result:
  Sum=Sum+item

print(Sum/1005)

## Cell 7 ##
## Scatter plot of clustering coefficient ##
print((Result))

nodes=[]
for i in range(0,1005):
  nodes.append(i)

plt.scatter(nodes,Result,color="red")
plt.xlabel('nodes') 
plt.ylabel('clustering coefficient of nodes') 
plt.title('Scatter plot of clustering coefficient of nodes') 
plt.show()

## Cell 8 ##
#3. Find any 1 centrality measure for each node

### Out degree centrality ###

X=[]
for i in range(0,len(adj[0])):
  X.append(i)

DEG1=[]
for item in adj.transpose():
  sum=0
  for i in item:
    if i==1:
      sum=sum+1
  DEG1.append(sum/len(adj[0]))

    



plt.bar(X,DEG1) 

plt.xlabel('nodes') 
 
plt.ylabel('out degree centrality') 

plt.show() 




### In degree centrality ###

DEG2=[]
for item in adj:
  sum=0
  for i in item:
    if i==1:
      sum=sum+1
  DEG2.append(sum/len(adj[0]))

print(DEG2)
print(len(adj[0]))
plt.bar(X,DEG2) 

plt.xlabel('nodes') 

plt.ylabel('in degree centrality') 

plt.show() 



max=0
r=0
for i1,i2 in zip(X,DEG1):
  if i2>max:
    max=i2
    r=i1

print(r)
print(statistics.mean(DEG1))
max=0
r=0
for i1,i2 in zip(X,DEG2):
  if i2>max:
    max=i2
    r=i1

print(r)
print(statistics.mean(DEG2))
res1 = sorted(range(len(DEG1)), key = lambda sub: DEG1[sub])[-10:] 
res2 = sorted(range(len(DEG2)), key = lambda sub: DEG2[sub])[-10:] 

print(res1)
print(res2)

## Cell 9 ##
## Page Rank ## 

nodes=list(range(0,len(adj)))
G=nx.from_numpy_matrix(adj.transpose(),create_using=nx.DiGraph)
pr = nx.pagerank(G, alpha=0.9,max_iter=25) 
#h,a=nx.hits(G)
print(pr)
#print(h)
#print(a)
L1=[]
L2=[]

for key in pr.keys():
  L1.append(key)
  L2.append(pr.get(key))
dict={"node":L1,"page rank" : L2}

df = pd.DataFrame(dict)


ax = sns.scatterplot(x="node", y="page rank",
                     hue="page rank",
                     data=df)

## Cell 10 ##
## HITS ##
h,a=nx.hits(G)
print(h)
print(a)

L1=[]
L2=[]
L3=[]
for key in h.keys():
  L1.append(key)
  L2.append(h.get(key))
  L3.append(a.get(key))
dict={"node":L1,"hub" : L2,"authority":L3}

df = pd.DataFrame(dict)


ax = sns.scatterplot(x="node", y="hub",
                     hue="hub",
                     data=df)

## Cell 11 ##
## Scatter plots of Authority score ##

ax1 = sns.scatterplot(x="node", y="authority",
                     hue="authority",
                     data=df)